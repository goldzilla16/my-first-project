name: Python Flask CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests and generate coverage
      - name: Run tests and generate coverage
        run: |
          coverage run -m pytest
          coverage report -m
          coverage xml

      # Step 5: Upload coverage report as artifact (optional)
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      # Step 6: Deploy to Heroku (only if tests pass)
      - name: Deploy to Heroku
        if: success()
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
          HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
        run: |
          # Install Heroku CLI
          curl https://cli-assets.heroku.com/install.sh | sh

          # Authenticate Heroku CLI non-interactively
          echo $HEROKU_API_KEY | heroku auth:token

          # Add Heroku git remote (CLI handles auth)
          heroku git:remote -a $HEROKU_APP_NAME

          # Push code to Heroku
          git push heroku main
